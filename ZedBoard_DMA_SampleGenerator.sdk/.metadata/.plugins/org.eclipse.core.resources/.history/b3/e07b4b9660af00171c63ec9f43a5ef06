/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "ps7_init.h"			// enable PL
#include "xscugic.h"			// interrupt controller
#include "xparameters.h"

#define printf xil_printf;

XScuGic InterruptController;
static XScuGic_Config *GicConfig;
u32 global_frame_counter = 0;

/*
 * ------------------------------------------------
 * | Initialize AXI-DMA                           |
 * ------------------------------------------------
*/
int Initialize_AXI_DMA(void)
{
	unsigned int tempval;

	//S2MM_DMACR.RS =1;										/* use below 3-lines instead because S2MM_DMACR is located at base address+30h */
	tempval = Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x30);		/* Read from memory location using Xil_In32 */
	tempval = tempval | 0x1001;								/* DMA unit enable - first bit, interrupt on complete enable - 12th bit */
	Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x30, tempval);		/* Write to memory location using Xil_Out32 of enabling */

	tempval = Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x30);
	printf("Value for DMA control register : %x \r\n", tempval);

	return 0;
}

/*
 * ------------------------------------------------
 * | Initialize Sample Generator                  |
 * ------------------------------------------------
*/
int Enable_SampleGenerator(unsigned int number_of_words)
{
	/* Set GPIO direction as output, by default its set to output, so nothing to do */

	/* Set value for frame size */
	Xil_Out32(XPAR_AXI_GPIO_0_BASEADDR, number_of_words);

	/* Enable sample generator */
	Xil_Out32(XPAR_AXI_GPIO_1_BASEADDR, 1);

	return 0;

}
/*
 * ------------------------------------------------
 * | Interrupt handler                            |
 * ------------------------------------------------
*/
void InterruptHandler(void)
{
	u32 tempval;

	/* Clear interrupt, just write bit no.12 of S2MM_DMACR */
	tempval = Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x34);
	tempval = tempval | 0x1000;
	Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x34, tempval);

	/* Data is in DRAM, do processing here */
	global_frame_counter++;
	if(global_frame_counter > 10000000)
	{
		printf("Frame Number : %d \r\n", global_frame_counter);
		return;
	}

	/* Initialize new data transfer */
	Start_DMA_Transfer(0xa000000, 256);
}

/*
 * ------------------------------------------------
 * | Setup Interrupt System                       |
 * ------------------------------------------------
*/
void Start_DMA_Transfer(unsigned int dstAddress, unsigned int len)
{
	/* Write destination address to S2MM_DA register */
	Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x48, dstAddress);

	/* Write length to S2MM_LENGTH register */
	Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x58, len);
}

/*
 * ------------------------------------------------
 * | Setup Interrupt System                       |
 * ------------------------------------------------
*/
int Setup_Interrupt_System(XScuGic *XScuGicInstancePtr)
{
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, XScuGicInstancePtr);
	Xil_ExceptionEnable();					/* Enable interrupts in ARM */
	return XST_SUCCESS;
}

/*
 * ------------------------------------------------
 * | Initialize Interrupt System                  |
 * ------------------------------------------------
*/
int Initialize_Interrupt_System(deviceID)
{
	int Status;

	GicConfig = XScuGic_LookupConfig(deviceID);
	if(NULL == GicConfig)
	{
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize (&InterruptController, GicConfig, GicConfig->CpuBaseAddress);
	if(Status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	Status = Setup_Interrupt_System(&InterruptController);
	if(Status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	Status =  XScuGic_Connect(&InterruptController, XPAR_FABRIC_AXI_DMA_0_S2MM_INTROUT_INTR, (Xil_ExceptionHandler)InterruptHandler, NULL);
	if(Status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	XScuGic_Enable(&InterruptController, XPAR_FABRIC_AXI_DMA_0_S2MM_INTROUT_INTR);

	return XST_SUCCESS;
}
/*
 * ------------------------------------------------
 * | main                                         |
 * ------------------------------------------------
*/
int main()
{
    printf("Hello World\n\r");

    /* Enable the PL */
    ps7_post_config();

    /* Initialize AXI-DMA */
    printf("Initializing AXI-DMA....\r\n");
    Initialize_AXI_DMA();

    /* Enable Sample Generator, end-of-frame comes after 128bytes(32 words) are transferred */
    printf("Enabling Sample generator....\r\n");
    Enable_SampleGenerator(32);

    /* Enable Interrupt system and interrupt handling */
    printf("Enabling Interrupts and Interrupt handling....\r\n");
    Initialize_Interrupt_System(XPAR_PS7_SCUGIC_0_DEVICE_ID);

    /* Start first DMA transfer */
    printf("To perform first DMA transfer, press any key....\r\n");
    getchar();
    Start_DMA_Transfer(0xa000000, 256);

    return 0;
}
